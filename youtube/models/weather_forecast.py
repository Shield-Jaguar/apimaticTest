# -*- coding: utf-8 -*-

"""
youtube

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""
from youtube.api_helper import APIHelper


class WeatherForecast(object):

    """Implementation of the 'WeatherForecast' model.

    TODO: type model description here.

    Attributes:
        date (datetime): The time when forecast was taken
        temperature_c (int): the value of temperature in Centigrade
        temperature_f (int): the value of temperature in Fahrenheit
        summary (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "date": 'date',
        "temperature_c": 'temperatureC',
        "temperature_f": 'temperatureF',
        "summary": 'summary'
    }

    def __init__(self,
                 date=None,
                 temperature_c=None,
                 temperature_f=None,
                 summary=None):
        """Constructor for the WeatherForecast class"""

        # Initialize members of the class
        self.date = APIHelper.RFC3339DateTime(date) if date else None
        self.temperature_c = temperature_c
        self.temperature_f = temperature_f
        self.summary = summary

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        date = APIHelper.RFC3339DateTime.from_value(dictionary.get("date")).datetime if dictionary.get("date") else None
        temperature_c = dictionary.get('temperatureC')
        temperature_f = dictionary.get('temperatureF')
        summary = dictionary.get('summary')

        # Return an object of this model
        return cls(date,
                   temperature_c,
                   temperature_f,
                   summary)
