/*
 * YoutubeLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package localhost5001.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost5001.ApiHelper;
import localhost5001.AuthManager;
import localhost5001.Configuration;
import localhost5001.Server;
import localhost5001.exceptions.ApiException;
import localhost5001.exceptions.ProblemDetailsException;
import localhost5001.http.Headers;
import localhost5001.http.client.HttpClient;
import localhost5001.http.client.HttpContext;
import localhost5001.http.request.HttpRequest;
import localhost5001.http.response.HttpResponse;
import localhost5001.http.response.HttpStringResponse;
import localhost5001.models.DynamicResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public APIController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * get list of 5 random forcasts.
     * @param  param  Optional parameter: default string parameter
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse getForcast(
            final String param) throws ApiException, IOException {
        HttpRequest request = buildGetForcastRequest(param);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetForcastResponse(context);
    }

    /**
     * get list of 5 random forcasts.
     * @param  param  Optional parameter: default string parameter
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> getForcastAsync(
            final String param) {
        return makeHttpCallAsync(() -> buildGetForcastRequest(param),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetForcastResponse(context));
    }

    /**
     * Builds the HttpRequest object for getForcast.
     */
    private HttpRequest buildGetForcastRequest(
            final String param) {
        //the base uri for api requests
        String baseUri = config.getBaseUri(Server.ENUM_DEFAULT);

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/WeatherForecast");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("param",
                (param != null) ? param : "String.Empty");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getForcast.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleGetForcastResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ProblemDetailsException("Test error message", context);
        }
        if (responseCode == 404) {
            throw new ApiException("not found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

}